(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"x4++":function(e,t,r){"use strict";r.d(t,"a",(function(){return L}));var n=r("XNiG"),o=r("itXk"),i=r("HDdC"),a=r("1G5W"),u=r("lJxs"),s=r("UXun"),d=r("nYR2"),c=(r("SxV6"),function(){return(c=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)});function l(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function g(e,t){return e(t={exports:{}},t.exports),t.exports}var f=g((function(e,t){function r(e,t,r){void 0===r&&(r={});var n={type:"Feature"};return(0===r.id||r.id)&&(n.id=r.id),r.bbox&&(n.bbox=r.bbox),n.properties=t||{},n.geometry=e,n}function n(e,t,n){return void 0===n&&(n={}),r({type:"Point",coordinates:e},t,n)}function o(e,t,n){void 0===n&&(n={});for(var o=0,i=e;o<i.length;o++){var a=i[o];if(a.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var u=0;u<a[a.length-1].length;u++)if(a[a.length-1][u]!==a[0][u])throw new Error("First and last Position are not equivalent.")}return r({type:"Polygon",coordinates:e},t,n)}function i(e,t,n){if(void 0===n&&(n={}),e.length<2)throw new Error("coordinates must be an array of two or more positions");return r({type:"LineString",coordinates:e},t,n)}function a(e,t){void 0===t&&(t={});var r={type:"FeatureCollection"};return t.id&&(r.id=t.id),t.bbox&&(r.bbox=t.bbox),r.features=e,r}function u(e,t,n){return void 0===n&&(n={}),r({type:"MultiLineString",coordinates:e},t,n)}function s(e,t,n){return void 0===n&&(n={}),r({type:"MultiPoint",coordinates:e},t,n)}function d(e,t,n){return void 0===n&&(n={}),r({type:"MultiPolygon",coordinates:e},t,n)}function c(e,r){void 0===r&&(r="kilometers");var n=t.factors[r];if(!n)throw new Error(r+" units is invalid");return e*n}function l(e,r){void 0===r&&(r="kilometers");var n=t.factors[r];if(!n)throw new Error(r+" units is invalid");return e/n}function g(e){return e%(2*Math.PI)*180/Math.PI}function f(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)&&!/^\s*$/.test(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.earthRadius=6371008.8,t.factors={centimeters:100*t.earthRadius,centimetres:100*t.earthRadius,degrees:t.earthRadius/111325,feet:3.28084*t.earthRadius,inches:39.37*t.earthRadius,kilometers:t.earthRadius/1e3,kilometres:t.earthRadius/1e3,meters:t.earthRadius,metres:t.earthRadius,miles:t.earthRadius/1609.344,millimeters:1e3*t.earthRadius,millimetres:1e3*t.earthRadius,nauticalmiles:t.earthRadius/1852,radians:1,yards:t.earthRadius/1.0936},t.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:.001,kilometres:.001,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/t.earthRadius,yards:1/1.0936},t.areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,millimeters:1e6,millimetres:1e6,yards:1.195990046},t.feature=r,t.geometry=function(e,t,r){switch(e){case"Point":return n(t).geometry;case"LineString":return i(t).geometry;case"Polygon":return o(t).geometry;case"MultiPoint":return s(t).geometry;case"MultiLineString":return u(t).geometry;case"MultiPolygon":return d(t).geometry;default:throw new Error(e+" is invalid")}},t.point=n,t.points=function(e,t,r){return void 0===r&&(r={}),a(e.map((function(e){return n(e,t)})),r)},t.polygon=o,t.polygons=function(e,t,r){return void 0===r&&(r={}),a(e.map((function(e){return o(e,t)})),r)},t.lineString=i,t.lineStrings=function(e,t,r){return void 0===r&&(r={}),a(e.map((function(e){return i(e,t)})),r)},t.featureCollection=a,t.multiLineString=u,t.multiPoint=s,t.multiPolygon=d,t.geometryCollection=function(e,t,n){return void 0===n&&(n={}),r({type:"GeometryCollection",geometries:e},t,n)},t.round=function(e,t){if(void 0===t&&(t=0),t&&!(t>=0))throw new Error("precision must be a positive number");var r=Math.pow(10,t||0);return Math.round(e*r)/r},t.radiansToLength=c,t.lengthToRadians=l,t.lengthToDegrees=function(e,t){return g(l(e,t))},t.bearingToAzimuth=function(e){var t=e%360;return t<0&&(t+=360),t},t.radiansToDegrees=g,t.degreesToRadians=function(e){return e%360*Math.PI/180},t.convertLength=function(e,t,r){if(void 0===t&&(t="kilometers"),void 0===r&&(r="kilometers"),!(e>=0))throw new Error("length must be a positive number");return c(l(e,t),r)},t.convertArea=function(e,r,n){if(void 0===r&&(r="meters"),void 0===n&&(n="kilometers"),!(e>=0))throw new Error("area must be a positive number");var o=t.areaFactors[r];if(!o)throw new Error("invalid original units");var i=t.areaFactors[n];if(!i)throw new Error("invalid final units");return e/o*i},t.isNumber=f,t.isObject=function(e){return!!e&&e.constructor===Object},t.validateBBox=function(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach((function(e){if(!f(e))throw new Error("bbox must only contain numbers")}))},t.validateId=function(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")},t.radians2degrees=function(){throw new Error("method has been renamed to `radiansToDegrees`")},t.degrees2radians=function(){throw new Error("method has been renamed to `degreesToRadians`")},t.distanceToDegrees=function(){throw new Error("method has been renamed to `lengthToDegrees`")},t.distanceToRadians=function(){throw new Error("method has been renamed to `lengthToRadians`")},t.radiansToDistance=function(){throw new Error("method has been renamed to `radiansToLength`")},t.bearingToAngle=function(){throw new Error("method has been renamed to `bearingToAzimuth`")},t.convertDistance=function(){throw new Error("method has been renamed to `convertLength`")}})),h=l(f),m=Object.freeze({__proto__:null,default:h,__moduleExports:f,earthRadius:f.earthRadius,factors:f.factors,unitsFactors:f.unitsFactors,areaFactors:f.areaFactors,feature:f.feature,geometry:f.geometry,point:f.point,points:f.points,polygon:f.polygon,polygons:f.polygons,lineString:f.lineString,lineStrings:f.lineStrings,featureCollection:f.featureCollection,multiLineString:f.multiLineString,multiPoint:f.multiPoint,multiPolygon:f.multiPolygon,geometryCollection:f.geometryCollection,round:f.round,radiansToLength:f.radiansToLength,lengthToRadians:f.lengthToRadians,lengthToDegrees:f.lengthToDegrees,bearingToAzimuth:f.bearingToAzimuth,radiansToDegrees:f.radiansToDegrees,degreesToRadians:f.degreesToRadians,convertLength:f.convertLength,convertArea:f.convertArea,isNumber:f.isNumber,isObject:f.isObject,validateBBox:f.validateBBox,validateId:f.validateId,radians2degrees:f.radians2degrees,degrees2radians:f.degrees2radians,distanceToDegrees:f.distanceToDegrees,distanceToRadians:f.distanceToRadians,radiansToDistance:f.radiansToDistance,bearingToAngle:f.bearingToAngle,convertDistance:f.convertDistance}),p=m&&h||m,y=g((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.getCoord=function(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return e.geometry.coordinates;if("Point"===e.type)return e.coordinates}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return e;throw new Error("coord must be GeoJSON Point or an Array of numbers")},t.getCoords=function(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")},t.containsNumber=function e(t){if(t.length>1&&p.isNumber(t[0])&&p.isNumber(t[1]))return!0;if(Array.isArray(t[0])&&t[0].length)return e(t[0]);throw new Error("coordinates must only contain numbers")},t.geojsonType=function(e,t,r){if(!t||!r)throw new Error("type and name required");if(!e||e.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.type)},t.featureOf=function(e,t,r){if(!e)throw new Error("No feature passed");if(!r)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!e.geometry||e.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.geometry.type)},t.collectionOf=function(e,t,r){if(!e)throw new Error("No featureCollection passed");if(!r)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+r+", FeatureCollection required");for(var n=0,o=e.features;n<o.length;n++){var i=o[n];if(!i||"Feature"!==i.type||!i.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!i.geometry||i.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+i.geometry.type)}},t.getGeom=function(e){return"Feature"===e.type?e.geometry:e},t.getType=function(e,t){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}})),w=l(y),v=Object.freeze({__proto__:null,default:w,__moduleExports:y,getCoord:y.getCoord,getCoords:y.getCoords,containsNumber:y.containsNumber,geojsonType:y.geojsonType,featureOf:y.featureOf,collectionOf:y.collectionOf,getGeom:y.getGeom,getType:y.getType}),b=v&&w||v,T=l(g((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){void 0===r&&(r={});var n=b.getCoord(e),o=b.getCoord(t),i=p.degreesToRadians(o[1]-n[1]),a=p.degreesToRadians(o[0]-n[0]),u=p.degreesToRadians(n[1]),s=p.degreesToRadians(o[1]),d=Math.pow(Math.sin(i/2),2)+Math.pow(Math.sin(a/2),2)*Math.cos(u)*Math.cos(s);return p.radiansToLength(2*Math.atan2(Math.sqrt(d),Math.sqrt(1-d)),r.units)}}))),E=l(g((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function e(t,r,n){if(void 0===n&&(n={}),!0===n.final)return function(t,r){return(e(r,t)+180)%360}(t,r);var o=b.getCoord(t),i=b.getCoord(r),a=p.degreesToRadians(o[0]),u=p.degreesToRadians(i[0]),s=p.degreesToRadians(o[1]),d=p.degreesToRadians(i[1]),c=Math.sin(u-a)*Math.cos(d),l=Math.cos(s)*Math.sin(d)-Math.sin(s)*Math.cos(d)*Math.cos(u-a);return p.radiansToDegrees(Math.atan2(c,l))}})));function R(e,t){return T(A(e),A(t))}function M(e,t){return E(A(e),A(t))}function A(e,t){var r;return{type:"Feature",geometry:{type:"Point",coordinates:e=[(r=e)[1],r[0]]},properties:t}}for(var P="0123456789bcdefghjkmnpqrstuvwxyz",O={},C=0;C<P.length;C++)O[P.charAt(C)]=C;var x=[0,5,7,8,11,12,13,15,16,17,18],F=function(e,t,r){if("auto"===r){if("number"==typeof e||"number"==typeof t)throw new Error("string notation required for auto precision.");var n=e.split(".")[1].length,o=t.split(".")[1].length,i=Math.max(n,o);r=x[i]}else void 0===r&&(r=9);for(var a,u=[],s=0,d=0,c=0,l=90,g=-90,f=180,h=-180;u.length<r;)d%2==0?t>(a=(f+h)/2)?(c=1+(c<<1),h=a):(c=0+(c<<1),f=a):e>(a=(l+g)/2)?(c=1+(c<<1),g=a):(c=0+(c<<1),l=a),d++,5==++s&&(u.push(P[c]),s=0,c=0);return u.join("")},j={units:"km",log:!1},_=function(){function e(e,t){this.app=e,this.ref=t,"string"==typeof t&&(this.ref=this.app.firestore().collection(t))}return e.prototype.within=function(e,t,r,l){var g=this;l=c(c({},j),l);var f=Date.now(),h=function(e){switch(!0){case e<=.00477:return 9;case e<=.0382:return 8;case e<=.153:return 7;case e<=1.22:return 6;case e<=4.89:return 5;case e<=39.1:return 4;case e<=156:return 3;case e<=1250:return 2;default:return 1}}(t),m=1.02*t,p=e.geohash.substr(0,h),y=function(e){var t=e.length,r=function(e){var t=function(e){for(var t,r=!0,n=90,o=-90,i=180,a=-180,u=0,s=0,d=e.length;s<d;s++){var c=e[s].toLowerCase();u=O[c];for(var l=4;l>=0;l--){var g=u>>l&1;r?(t=(i+a)/2,1===g?a=t:i=t):(t=(n+o)/2,1===g?o=t:n=t),r=!r}}return[o,a,n,i]}(e),r=(t[0]+t[2])/2,n=(t[1]+t[3])/2;return{latitude:r,longitude:n,error:{latitude:t[2]-r,longitude:t[3]-n}}}(e),n=r.latitude,o=r.longitude,i=2*r.error.latitude,a=2*r.error.longitude;function u(e,r){return F(n+e*i,o+r*a,t)}return[u(1,0),u(1,1),u(0,1),u(-1,1),u(-1,0),u(-1,-1),u(0,-1),u(1,-1)]}(p).concat(p),w=e.geopoint,v=w.latitude,b=w.longitude,T=new n.a,E=y.map((function(e){var t,n,o=g.queryPoint(e,r);return(t=o,new i.a((function(e){return{unsubscribe:t.onSnapshot((function(t){return e.next(t)}),(function(t){return e.error(t)}))}}))).pipe((void 0===n&&(n="id"),Object(u.a)((function(e){return e.docs.map((function(e){var t;return c(c({},n?((t={})[n]=e.id,t):null),e.data())}))}))),Object(a.a)(T))}));return o.b.apply(void 0,E).pipe(Object(u.a)((function(e){var n=e.reduce((function(e,t){return e.concat(t)})),o=n.filter((function(e){var t=e[r].geopoint;return R([v,b],[t.latitude,t.longitude])<=m}));return l.log&&(console.group("GeoFireX Query"),console.log("\ud83c\udf10 Center "+[v,b]+". Radius "+t),console.log("\ud83d\udccd Hits: "+n.length),console.log("\u231a Elapsed time: "+(Date.now()-f)+"ms"),console.log("\ud83d\udfe2 Within Radius: "+o.length),console.groupEnd()),o.map((function(e){var t=e[r].geopoint,n=t.latitude,o=t.longitude,i={distance:R([v,b],[n,o]),bearing:M([v,b],[n,o])};return c(c({},e),{hitMetadata:i})})).sort((function(e,t){return e.hitMetadata.distance-t.hitMetadata.distance}))})),Object(s.a)(1),Object(d.a)((function(){l.log&&console.log("\u270b Query complete"),T.next(!0)})))},e.prototype.queryPoint=function(e,t){var r=e+"~";return this.ref.orderBy(t+".geohash").startAt(e).endAt(r)},e}(),D=function(){function e(e){this.app=e}return e.prototype.query=function(e){return new _(this.app,e)},e.prototype.point=function(e,t){return{geopoint:new this.app.firestore.GeoPoint(e,t),geohash:F(e,t,9)}},e.prototype.distance=function(e,t){return R([e.geopoint.latitude,e.geopoint.longitude],[t.geopoint.latitude,t.geopoint.longitude])},e.prototype.bearing=function(e,t){return M([e.geopoint.latitude,e.geopoint.longitude],[t.geopoint.latitude,t.geopoint.longitude])},e}();function L(e){return new D(e)}}}]);